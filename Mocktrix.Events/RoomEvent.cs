/*
    This file is part of Mocktrix.
    Copyright (C) 2024  Dirk Stolle

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using System.Text.Json.Serialization;

namespace Mocktrix.Events
{
    /// <summary>
    /// Abstract class that contains data commonly present in all room events.
    /// </summary>
    public abstract class RoomEvent : IEvent
    {
        /// <summary>
        /// A globally unique event identifier.
        /// </summary>
        [JsonPropertyName("event_id")]
        [JsonPropertyOrder(-90)]
        public string EventId { get; set; } = null!;


        /// <summary>
        /// Timestamp in milliseconds since the Unix epoch when this event was
        /// sent on the originating homeserver.
        /// </summary>
        [JsonPropertyName("origin_server_ts")]
        [JsonPropertyOrder(-80)]
        public long OriginServerTs { get; set; }


        /// <summary>
        /// Id of the room associated with this event.
        /// </summary>
        [JsonPropertyName("room_id")]
        [JsonPropertyOrder(-60)]
        public string RoomId { get; set; } = null!;


        /// <summary>
        /// Fully qualified id of the user that sent the event.
        /// </summary>
        [JsonPropertyName("sender")]
        [JsonPropertyOrder(-50)]
        public string Sender { get; set; } = null!;


        [JsonPropertyName("type")]
        [JsonPropertyOrder(-30)]
        public abstract string Type { get; set; }


        /// <summary>
        /// Optional information about the event.
        /// </summary>
        [JsonPropertyOrder(-20)]
        [JsonPropertyName("unsigned")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public UnsignedData? Unsigned {  get; set; }   
    }


    /// <summary>
    /// Optional room event data.
    /// </summary>
    public class UnsignedData
    {
        /// <summary>
        /// The time in milliseconds that has elapsed since the event was sent.
        /// This field is generated by the local homeserver, and may be
        /// incorrect if the local time on at least one of the two servers is
        /// out of sync, which can cause the age to either be negative or
        /// greater than it actually is.
        /// </summary>
        [JsonPropertyName("age")]
        public long Age { get; set; }


        /// <summary>
        /// The event that redacted this event, if any.
        /// </summary>
        [JsonPropertyName("redacted_because")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? RedactedBecause { get; set; }


        /// <summary>
        /// The client-supplied transaction ID, if the client being given the
        /// event is the same one which sent it.
        /// </summary>
        [JsonPropertyName("transaction_id")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? TransactionId { get; set; }
    }
}
